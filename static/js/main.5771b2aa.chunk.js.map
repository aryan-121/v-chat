{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","dummy","useRef","messageRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","placeholder","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","signOut","document","getElementById","style","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2RAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOR,IAASQ,OAChBC,EAAYT,IAASS,YAsB3B,SAASC,IAKP,OACE,wBAAQC,QALe,WACvB,IAAMC,EAAW,IAAIZ,IAASQ,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAGrB,iCAUJ,SAASG,IACP,IAAMC,EAAQC,mBACRC,EAAaT,EAAUU,WAAW,YAClCC,EAAQF,EAAWG,QAAQ,aAAaC,MAAM,IAHnC,EAICC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAJW,sBAKiBC,mBAAS,IAL1B,mBAKVC,EALU,KAKCC,EALD,KAMXC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEMxB,EAAKyB,YAAtBC,EAFW,EAEXA,IAAKC,EAFM,EAENA,SAFM,SAIZjB,EAAWkB,IAAI,CACnBC,KAAMV,EACNW,UAAWtC,IAASS,UAAU8B,WAAWC,kBACzCN,MACAC,aARgB,OAUlBP,EAAa,IACbZ,EAAMyB,QAAQC,eAAe,CAACC,SAAU,WAXtB,2CAAH,sDAejB,OACE,qCACE,iCACGlB,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACvD,qBAAKC,IAAKjC,OAGZ,uBAAMkC,SAAUrB,EAAhB,UACI,uBAAOsB,YAAc,qBAAqBC,MAAOzB,EAAW0B,SAAU,SAACvB,GAAD,OAAOF,EAAaE,EAAEwB,OAAOF,UACnG,wBAAQG,KAAO,SAAf,wBAMV,SAAST,EAAYU,GAAO,IAAD,EACKA,EAAMT,QAA7BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SACZsB,EAAevB,IAAQ1B,EAAKyB,YAAYC,IAAM,OAAS,WAE7D,OACE,sBAAKwB,UAAS,kBAAcD,GAA5B,UACE,qBAAKE,IAAKxB,IACV,4BAAIE,OAMKuB,MArFf,WAAgB,IAAD,EACEC,YAAarD,GAArBsD,EADM,oBAEb,OACE,sBAAKJ,UAAU,MAAf,UACE,4CAEG,wBAAQV,GAAK,UAAUrC,QAAS,SAACmB,GAC/BA,EAAEE,iBACFxB,EAAKuD,UACLC,SAASC,eAAe,WAAWC,MAAMC,QAAU,UAHrD,yBAOH,kCACKL,EAAO,cAAC/C,EAAD,IAAe,cAACL,EAAD,UCxBlB0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASC,eAAe,SAM1BG,M","file":"static/js/main.5771b2aa.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport './App.css';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBZGy--btJtgBsbgq55JfHW1w8NF0VzlnE\",\n  authDomain: \"v-chat-95191.firebaseapp.com\",\n  projectId: \"v-chat-95191\",\n  storageBucket: \"v-chat-95191.appspot.com\",\n  messagingSenderId: \"504480670740\",\n  appId: \"1:504480670740:web:b6201a834d221e3bec3301\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n         V-CHAT\n         <button id = \"signout\" onClick={(e)=>{\n           e.preventDefault();\n           auth.signOut();\n           document.getElementById(\"signout\").style.display = \"hidden\";\n         }}>Sign Out</button>\n      </header>\n\n      <section>\n          {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={() => auth.SignOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n  const dummy = useRef();\n  const messageRef = firestore.collection('messages');\n  const query = messageRef.orderBy('createdAt').limit(25);\n  const[messages] = useCollectionData(query, {idField: 'id'});\n  const [formValue, setFormValue] = useState('');\n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const {uid, photoURL} = auth.currentUser;\n\n    await messageRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({behavior: 'smooth'});\n  }\n\n  \n  return(\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <div ref={dummy}></div>\n      </main>\n\n      <form onSubmit={sendMessage}>\n          <input placeholder = \"Type a Message ...\" value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n          <button type = 'submit'>Send</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return(\n    <div className={ `message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}